//npm dependencies
var express = require("express");
var router = express.Router();
var passport = require("passport");
var async = require("async");

//models
var User = require("../models/user");
var Post = require("../models/post");
var Comment = require("../models/comment");
var Project = require("../models/project");
var Meeting = require("../models/meeting");

router.get("/", function(req, res) {
    //returns all posts on the website since the search parameter is empty
    Post.find({}).populate("comments").exec(function(err, allPosts) {
        if (err) {
            console.log(err);
        }
        else {
            allPosts.reverse(); //reverses the found posts so that the newest posts are first in the allPosts array instead of last
            async.each(allPosts, function(post, callback) {
                post.comments.reverse();
                callback(null);
            }, function(err) {
                if (err) {
                    console.log(err);
                }
                else {
                    res.render("landing", {posts: allPosts});
                }
            });
        }
    });
});

//register form
router.get("/login", function(req, res) {
    var url;
    if (req.query.url) {
        url = req.query.url;
    }
    else {
        url = null;
    }
    res.render("login", {url: url});
});

//handle login
router.post("/login", passport.authenticate("local",
    {
        //successRedirect: "/dashboard", //middleware
        failureRedirect: "/login",
    }), function(req, res) { //invoked if authentication is successful
            if (req.query.url) {
                req.flash("success", "Welcome, " + req.user.name);
                res.redirect(req.query.url);
            }
            else {
                res.redirect("/");
            }
});

//handle register
router.post("/register", function(req, res) {
    var newUser = new User({username: req.body.username, email: req.body.username, name: req.body.name});
    User.register(newUser, req.body.password, function(err, newUser) {
        if (err) {
            console.log(err);
            req.flash("error", err.message); //err.message is inside the object generated by passpost.js
            return res.render("register");
        }
        passport.authenticate("local")(req, res, function() {
            req.flash("success", "Welcome, " + req.body.name);
            var officerArray = ["jeremyaherzog@gmail.com",]; //array of officer emails
            async.each(officerArray, function(officer, callback) {
                if (officer === newUser.email) {
                    newUser.isOfficer = true;
                    newUser.save();
                    callback(null);
                }
                else {
                    newUser.isOfficer = false;
                    callback(null);
                }
            }, function(err) {
                if (err) {
                    console.log(err);
                }
                else {
                    //newUser.isWebmaster = true;
                    //newUser.save();
                    if (req.query.url) {
                        res.redirect(req.query.url);
                    }
                    else {
                        res.redirect("/");
                    }
                }
            });
        });
    });
});

//handle sign out
router.get("/logout", function(req, res) {
    req.logout();
    req.flash("success", "Signed you out!");
    res.redirect("/");
});

router.get("/settings", function(req, res) {
    //searches for a user in the database by the id associated with the user making the request
    //that id is accessed in dot notation by ._id (this is the same when accessing the id of any other mongoDB object schema)
    //this assumes that a logged in user is making the request, which is why middleware is called to check if the person making the request is logged in
    User.findById(req.user._id, function(err, foundUser) {
        if (err) {
            console.log(err);
        }
        else {
            //if the user's data is returned, the settings page is rendered and sent an object called user which is equal to the found user
            res.render("settings", {user: foundUser});
        }
    });
});

router.post("/settings", function(req, res) {
    //as a security measure, a user object is used to update the user instead of relying on body parser's object if we used user[] for all the fields
    //this is so someone can't duplicate the page, add fields that would allow them to become an admin, and submit it to get admin access
    var userObj = {
        role: req.body.role,
        bio: req.body.bio,
        //photo: req.body.photo
    };
    User.findByIdAndUpdate(req.user._id, userObj, function(err, updatedUser) {
        if (err) {
            console.log(err);
        }
        else {
            console.log("Updated user: " + updatedUser);
            res.redirect("/");
        }
    });
});

router.get("/about", function(req, res) {
    res.render("about");
});

router.get("/calendar", function(req, res) {
    res.send("need to set up calendar page");
});

router.get("/contact", function(req, res) {
    res.render("contact");
});

router.post("/contact", function(req, res) {
    //add mailgun api
    res.send("need to configure the mailgun api" + req.body);
});

router.get("/members", function(req, res) {
    if (req.user.isOfficer) {
        User.find({}, function(err, foundUsers) {
            if (err) {
                console.log(err);
            }
            else {
                Meeting.find({}).populate("attendees").exec(function(err, foundMeetings) {
                    if (err) {
                        console.log(err);
                    }
                    else {
                        res.render("members", {users: foundUsers, meetings: foundMeetings});
                    }
                });
            }
        });
    }
});

router.get("/createpost", function(req, res) {
    res.render("posts/createpost");
});

router.post("/createpost", function(req, res) {
    Post.create(req.body.post, function(err, newPost) {
        if (err) {
            console.log(err);
        }
        else {
            newPost.author.id = req.user;
            newPost.author.name = req.user.name;
            newPost.save();
            console.log("New post created: " + newPost);
            res.redirect("/");
        }
    });
});

router.get("/editpost/:post_id", function(req, res) {
    //finds a post based on the id of the post passed in by the http request
    //for example, someone makes a request to the page with the address https://umnenergyclub-herzo175.c9users.io/viewpost/abce12345
    //abce12345 is the id of the post, the below function takes that id and uses it to find a particular post in the database
    Post.findById(req.params.post_id, function(err, foundPost) {
        if (err) {
            console.log(err);
        }
        else {
            //renders the edit post page (editpost.ejs) with the found post object
            res.render("posts/editpost", {post: foundPost});
        }
    });
});

router.put("/editpost/:post_id", function(req, res) {
    Post.findByIdAndUpdate(req.params.post_id, req.body.post, function(err, updatedPost) {
        if (err) {
            console.log(err);
        }
        else {
            updatedPost.author.id = req.user;
            updatedPost.save();
            console.log("Edited post: " + updatedPost);
            res.redirect("/");
        }
    });
});

router.get("/deletepost/:post_id", function(req, res) {
    Post.findById(req.params.post_id, function(err, foundPost) {
        if (err) {
            console.log(err);
        }
        else {
            if ((foundPost.author.id.equals(req.user._id) || req.user.isOfficer || req.user.isWebmaster) && req.query._method === "DELETE") {
                foundPost.remove();
                res.redirect("/");
            }
            else {
                res.redirect("/");
            }
        }
    });
});

router.post("/createcomment/:post_id", function(req, res) {
    Post.findById(req.params.post_id, function(err, foundPost) {
        if (err) {
            console.log(err);
        }
        else {
            Comment.create(req.body.comment, function(err, newComment) {
                if (err) {
                    console.log(err);
                }
                else {
                    newComment.author.id = req.user;
                    newComment.author.name = req.user.name;
                    newComment.save();
                    foundPost.comments.push(newComment);
                    foundPost.save();
                    res.redirect("/");
                }
            });
        }
    });
});

router.get("/deletecomment/:comment_id", function(req, res) {
    Comment.findById(req.params.comment_id, function(err, foundComment) {
        if (err) {
            console.log(err);
        }
        else {
            if ((foundComment.author.id.equals(req.user._id) || req.user.isOfficer || req.user.isWebmaster) && req.query._method === "DELETE") {
                foundComment.remove();
                res.redirect("/");
            }
            else {
                res.redirect("/");
            }
        }
    });
});

router.get("/createproject", function(req, res) {
    res.render("projects/createproject");
});

router.post("/createproject", function(req, res) {
    Project.create(req.body.project, function(err, newProject) {
        if (err) {
            console.log(err);
        }
        else {
            newProject.isActive = true;
            newProject.author.id = req.user;
            newProject.save();
            console.log("New project: " + newProject);
            res.redirect("/");
        }
    });
});

router.get("/editproject/:project_id", function(req, res) {
    Project.findById(req.params.project_id, function(err, foundProject) {
        if (err) {
            console.log(err);
        }
        else {
            res.render("projects/editproject", {project: foundProject});
        }
    });
});

router.put("/editproject/:project_id", function(req, res) {
    Project.findByIdAndUpdate(req.params.project_id, req.body.project, function(err, updatedProject) {
        if (err) {
            console.log(err);
        }  
        else {
            console.log("Updated project: " + updatedProject);
            res.redirect("/");
        }
    });
});

router.get("/toggleproject/:project_id", function(req, res) {
    Project.findById(req.params.project_id, function(err, foundProject) {
        if (err) {
            console.log(err);
        }
        else {
            foundProject.isActive = !foundProject.isActive;
            foundProject.save();
            res.redirect("/projects");
        }
    });
});

router.get("/deleteproject/:project_id", function(req, res) {
    Project.findById(req.params.project_id, function(err, foundProject) {
        if (err) {
            console.log(err);
        }
        else {
            if ((foundProject.author.id.equals(req.user._id) || req.user.isOfficer || req.user.isWebmaster) && req.query._method === "DELETE") {
                foundProject.remove();
                res.redirect("/");
            }
            else {
                res.redirect("/");
            }
        }
    });
});

router.get("/createmeeting", function(req, res) {
    res.render("meetings/createmeeting");
});

router.post("/createmeeting", function(req, res) {
    Meeting.create(req.body.meeting, function(err, newMeeting) {
        if (err) {
            console.log(err);
        }
        else {
            newMeeting.author.id = req.user;
            newMeeting.save();
            console.log("New meeting: " + newMeeting);
            res.redirect("/");
        }
    });
});

router.get("/attendmeeting/:meeting_id", function(req, res) {
    Meeting.findById(req.params.meeting_id, function(err, foundMeeting) {
        if (err) {
            console.log(err);
        }
        else {
            if (foundMeeting.attendeeNames.indexOf(req.user.name) > -1) {
                res.redirect("back");
            }
            else {
                foundMeeting.attendeeNames.push(req.user.name);
                foundMeeting.attendees.push(req.user);
                foundMeeting.save();
                res.redirect("/");
            }
        }
    });
});

router.get("/editmeeting/:meeting_id", function(req, res) {
    Meeting.findById(req.params.meeting_id, function(err, foundMeeting) {
        if (err) {
            console.log(err);
        }
        else {
            res.render("meetings/editmeeting", {meeting: foundMeeting});
        }
    });
});

router.put("/editmeeting/:meeting_id", function(req, res) {
    Meeting.findByIdAndUpdate(req.params.meeting_id, req.body.meeting, function(err, updatedMeeting) {
        if (err) {
            console.log(err);
        }  
        else {
            console.log("Updated meeting: " + updatedMeeting);
            res.redirect("/");
        }
    });
});

router.get("/deletemeeting/:meeting_id", function(req, res) {
    Meeting.findById(req.params.meeting_id, function(err, foundMeeting) {
        if (err) {
            console.log(err);
        }
        else {
            if ((foundMeeting.author.id.equals(req.user._id) || req.user.isOfficer || req.user.isWebmaster) && req.query._method === "DELETE") {
                foundMeeting.remove();
                res.redirect("/");
            }
            else {
                res.redirect("/");
            }
        }
    });
});

router.get("/officers", function(req, res) {
    User.find({"isOfficer": true}, function(err, foundOfficers) {
        if (err) {
            console.log(err);
        }
        else {
            res.render("officers", {officers: foundOfficers});
        }
    });
});

router.get("/projects", function(req, res) {
    Project.find({}, function(err, foundProjects) {
        if (err) {
            console.log(err);
        }
        else {
            res.render("projects/projects", {projects: foundProjects});
        }
    });
});

router.get("/meetings", function(req, res) {
    Meeting.find({}, function(err, foundMeetings) {
        if (err) {
            console.log(err);
        }
        else {
            foundMeetings.reverse();
            res.render("meetings/meetings", {meetings: foundMeetings});
        }
    });
});

router.post("/twilio/message", function(req, res) {
    //save this for later...
    console.log(req);
});

router.post("/sendemail", function(req, res) {
    res.send("need to configure the mailgun api" + req.body);
});

//exports all of these routes so we can use them on app.js
module.exports = router;