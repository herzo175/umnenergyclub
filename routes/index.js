//npm dependencies
var express = require("express");
var router = express.Router();
var passport = require("passport");
var async = require("async");

//models
var User = require("../models/user");
var Post = require("../models/post");
var Meeting = require("../models/meeting");

//libraries
var middleware = require("../library/middleware");
var apis = require("../library/apis");

router.get("/", function(req, res) {
    //returns all posts on the website since the search parameter is empty
    Post.find({}).populate("comments").exec(function(err, allPosts) {
        if (err) {
            console.log(err);
        }
        else {
            allPosts.reverse(); //reverses the found posts so that the newest posts are first in the allPosts array instead of last
            async.each(allPosts, function(post, callback) {
                post.comments.reverse();
                callback(null);
            }, function(err) {
                if (err) {
                    console.log(err);
                }
                else {
                    res.render("landing", {posts: allPosts});
                }
            });
        }
    });
});

//register form
router.get("/login", function(req, res) {
    var url;
    if (req.query.url) {
        url = req.query.url;
    }
    else {
        url = null;
    }
    res.render("login", {url: url});
});

//handle login
router.post("/login", passport.authenticate("local",
    {
        //successRedirect: "/dashboard", //middleware
        failureRedirect: "/login",
    }), function(req, res) { //invoked if authentication is successful
            if (req.query.url) {
                req.flash("success", "Welcome, " + req.user.name);
                res.redirect(req.query.url);
            }
            else {
                res.redirect("/");
            }
});

//handle register
router.post("/register", function(req, res) {
    req.body.name = req.sanitize(req.body.name);
    var newUser = new User({username: req.body.username, email: req.body.username, name: req.body.name});
    User.register(newUser, req.body.password, function(err, newUser) {
        if (err) {
            console.log(err);
            req.flash("error", err.message); //err.message is inside the object generated by passpost.js
            return res.render("login");
        }
        passport.authenticate("local")(req, res, function() {
            req.flash("success", "Welcome, " + req.body.name);
            var officerArray = ["jeremyaherzog@gmail.com","wang3790@umn.edu"]; //array of officer emails
            if (officerArray.indexOf(newUser.email) > -1) {
                newUser.isOfficer = true;
                newUser.save();
            }
            //newUser.isWebmaster = true;
            //newUser.save();
            if (req.query.url) {
                res.redirect(req.query.url);
            }
            else {
                res.redirect("/");
            }
        });
    });
});

//handle sign out
router.get("/logout", middleware.isLoggedIn, function(req, res) {
    req.logout();
    req.flash("success", "Signed you out!");
    res.redirect("/");
});

router.get("/settings", middleware.isLoggedIn, function(req, res) {
    //searches for a user in the database by the id associated with the user making the request
    //that id is accessed in dot notation by ._id (this is the same when accessing the id of any other mongoDB object schema)
    //this assumes that a logged in user is making the request, which is why middleware is called to check if the person making the request is logged in
    User.findById(req.user._id, function(err, foundUser) {
        if (err) {
            console.log(err);
        }
        else {
            //if the user's data is returned, the settings page is rendered and sent an object called user which is equal to the found user
            res.render("settings", {user: foundUser});
        }
    });
});

router.post("/settings", middleware.isLoggedIn, function(req, res) {
    //as a security measure, a user object is used to update the user instead of relying on body parser's object if we used user[] for all the fields
    //this is so someone can't duplicate the page, add fields that would allow them to become an admin, and submit it to get admin access
    req.body.bio = req.sanitize(req.body.bio);
    var userObj = {
        role: req.body.role,
        bio: req.body.bio,
        //photo: req.body.photo
    };
    User.findByIdAndUpdate(req.user._id, userObj, function(err, updatedUser) {
        if (err) {
            console.log(err);
        }
        else {
            console.log("Updated user: " + updatedUser);
            res.redirect("/");
        }
    });
});

router.get("/about", function(req, res) {
    res.render("about");
});

router.get("/calendar", function(req, res) {
    res.send("need to set up calendar page");
});

router.get("/contact", function(req, res) {
    res.render("contact");
});

router.post("/contact", function(req, res) {
    req.body.email = req.sanitize(req.body.email);
    req.body.subject = req.sanitize(req.body.subject);
    req.body.body = req.sanitize(req.body.body);
    console.log(req.body);
    apis.sendEmailToAdmin(req);
    res.redirect("/");
});

router.get("/members", middleware.isLoggedIn, function(req, res) {
    if (req.user.isOfficer) {
        User.find({}, function(err, foundUsers) {
            if (err) {
                console.log(err);
            }
            else {
                Meeting.find({}).populate("attendees").exec(function(err, foundMeetings) {
                    if (err) {
                        console.log(err);
                    }
                    else {
                        res.render("members", {users: foundUsers, meetings: foundMeetings});
                    }
                });
            }
        });
    }
});

router.get("/officers", function(req, res) {
    User.find({"isOfficer": true}, function(err, foundOfficers) {
        if (err) {
            console.log(err);
        }
        else {
            res.render("officers", {officers: foundOfficers});
        }
    });
});

router.post("/twilio/message", function(req, res) {
    //save this for later...
    console.log(req);
});

router.post("/sendemail", function(req, res) {
    req.body.subject = req.sanitize(req.body.subject);
    req.body.body = req.sanitize(req.body.body);
    console.log(req.body);
    apis.sendEmailsToRecipients(req);
    res.redirect("/");
});

module.exports = router;